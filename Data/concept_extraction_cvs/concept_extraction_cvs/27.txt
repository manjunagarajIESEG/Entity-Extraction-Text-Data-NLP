Sr. Java/J2EE Developer
Merrill Lynch, Hope Well, NJ
Description: This is a web-based (Intranet) application used to input trading revenue details from various trading business units and generate reports. This receives revenue estimates from various Business Units. This application calculates the variant form the forecasted data and actual data. The data is presented to executive level businessmen through integrating it into intranet site. The consolidated revenue data from the system also feeds information to other websites.  Responsibilities: • Analyzed Business requirements and existing software for High Level Design. Prepared System Requirement Specification (SRS) and functionality documents. • Followed Scrum concepts of Agile Methodology to produce high Quality application. • Designed and developed user interface screens using AJAX, HTML, DHTML, JSF, Servlets and JavaScript. • Used JavaScript to validate the fields of the user registration screen and login screen. • Implemented Spring MVC architecture. • Configured Spring to manage Actions as beans and set their dependencies in a Spring context file and integrated middle tier with Struts web layer. • Implemented Struts 2 framework for web controller, utilized Struts validations. • Designed and integrated the full scale Hibernate Persistence solutions with the application architectures and also used Annotations Developed Session Bean for implementing the Business Logic. • Designed and developed JSF components, implemented event handling using Java, JSF, AJAX, and JavaScript for various modules. • Implemented JSF Converters to handle formatting and Localization and configured the faces-config.xml to create a web application navigation rule. • Implemented caching techniques, wrote POJO classes for storing data and DAO's to retrieve the data and did other database configurations using Hibernate. • Wrote build & deployment scripts using Maven. • Deployed flow of Execution in the Servlet Environment using JSF and defined Navigation Rules. • Architected JMS with Spring which involves setting up ActiveMQ message broker, declared ActiveMQ message destinations and also implemented Spring's JMS Gateway Support class as a base class for JMS gateway classes. • Orderly logged the whole process using log4j for auditing, debugging and error logging purposes. • Performed Unit testing by using JUnit, and load testing by using JMeter.  Environment: Java (Java1.6), J2EE, Websphere Application Server (WAS)7.0, Eclipse IDE, Shell and Perl scripts, Oracle 9i/10g, DB2 9.5, UML, DOM/SAX parser, Unix, PL/SQL, XML, Windows OS, HTML, IIS7.0, FTP, SSH.
