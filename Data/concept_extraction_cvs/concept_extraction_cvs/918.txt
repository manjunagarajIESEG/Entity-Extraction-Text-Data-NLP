SOFTWARE DEVELOPER - PYTHON/JAVA
BANK OF AMERICA - Edison, NJ
Regulatory Reporting System: Worked in Derivatives and FX Back Office Technology for Regulatory Reporting of Foreign Exchange, Interest Rates, Credits and Equities OTC financial product transactions to national regulatory authorities such as US CFTC, European ESMA, Russian NSD, MAS - Singapore and Hong Kong (HKMA) through DTCC (Depository Trust and Clearing Corporation).  • Worked extensively on the Python based proprietary framework Quartz. • Performed efficient delivery of code based on principles of Test Driven Development(TDD) and continuous integration to keep in line with Agile Software Methodology principles. • Implemented large scale data processing of trade and position level information, by using a custom built MapReduce engine. • Implemented and consumed Task Schedulers for scheduling job priority while distributing data and map/reduce functions over Grid. • Created time sensitive scripts to parse to large sets of serialized, unstructured data objects (30 Million +), filtering and reducing data into functional reports. • Worked on a large scale distributed computing environment, monitoring data nodes to prioritize jobs for processing functions. • Back loaded 1.6 million trades for European jurisdiction and improved performance by implementing multiple UNIX Cron job feeders for single activity. • Used existing Deal Model in Python to inherit and create object data structure for regulatory reporting. • Developed and maintained web services in Jython using RPyC module to process trade data from legacy applications. • Used standard Python modules e.g. csv, robotparser, itertools, pickle, jinja2, lxml for development. • Created modules to transform incoming XML trade data into trade objects, parse trade data and create outbound FPML (Financial Products Markup Language) sent to DTCC repositories. • Implemented concept of Dependency Acyclic Graph in existing Deal Model within Python classes for creating dependency over various deals objects across the Bank's systems. • Implemented and used custom built query script to store, index and read large sets of Object data (like MongoDb) • Used Python unit and functional testing modules such as unit test, unittest2, mock, and custom frameworks inline with Agile Software Development methodologies. • Trained extensively in Agile methodologies and implemented by participating in scrum standups, Kanban mode, discussing and implementing requirements with Product Owners  Affirmation, Cash Flow Matching and Confirmation System: Developed and maintained a workflow tool in C#, Java and TIBCO to provide Affirmation data to Client Service professionals. Developed multiprocessing tools in Core Java to read and process large sets of Equity trade data from various regions and messaging them to Documentation and Confirmation team. • Used Core Java to create ad-hoc job schedulers to source regional data and queue into documentation process. • Used effective Java Design patterns in line with SOLID principles. Design patterns such as Factory, Proxy, Service Locator commonly used. • Worked on Business Process Modeling (BPM) using TIBCO ® iProcess for Derivative Affirmations, Confirmations and Cash Flow Settlements. • Implemented SOAP over JMS Web Services as an alternative to standard SOAP/HTTP Java Web Services in TIBCO. • Worked on development and maintenance of business processes using TIBCO ® Business Works for the above mentioned, and integration with iProcess and GUI. • Resolving issues related to messaging and queuing systems in JMS, EMS (Tibco) and IBM® Websphere MQ. • Development, bug fixes and enhancements of GUI written in C# and .NET platform
